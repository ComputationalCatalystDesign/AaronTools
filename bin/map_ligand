#!/usr/bin/perl -w

use strict;
use lib $ENV{'QCHASM'};

use Getopt::Long;
use Pod::Usage;
use AaronTools::Geometry;

unshift @INC, ("$ENV{'QCHASM'}/AaronTools/bin");
require _utils;

sub main {
	my $reffile    = shift;
	my %opt        = @_;

	# read in reference geometry
	my $refgeom    = _utils::get_cat($reffile);
	return 1 unless $refgeom;
	foreach my $targetfile ( @{$opt{ligand}} ) {
		my $ligand = _utils::get_lig($targetfile);
		next unless $ligand;

		# perform map ligand
		my $mapped = $refgeom->copy();
		$mapped->map_ligand($ligand);

		# Printing
		# prints to STDOUT if $outfile == ''
		my $outfile = _utils::get_outfile(_utils::strip_dir($targetfile), $opt{write}, ['mapped']);
		print("Saving mapped ligand to $outfile\n") if $outfile;
		$mapped->printXYZ( $outfile );
	}
}

# read in options
my %opt;
my @ligand_geoms;
$opt{help}   = '';
$opt{ligand} = \@ligand_geoms;
$opt{write}  = '-';
GetOptions(
    'help|h'    => \$opt{help},
    'ligand|l=s'  => \@ligand_geoms,
    'write|w:s' => \$opt{write} )
  or pod2usage( {
      -exitval => 1,
      -verbose => 1
  } );
pod2usage(0) if $opt{help};

pod2usage( {
        -message => "Please provide a reference geometry",
        -exitval => 1,
        -verbose => 1
    } ) unless ( $ARGV[0] );
pod2usage( {
		-message => "Please provide at least one ligand geometry",
		-exitval=> 1,
		-verbose => 1
	})unless (@ligand_geoms > 0 );

&main( $ARGV[0], %opt );

=pod

=head1 SYNOPSIS

map_ligand [options] reference_structure -l target_ligand [second_target ...]

=head1 OPTIONS

=over

=item B<-l target_ligand>, B<--ligand target_ligand>

Specify ligands to map to reference structure. Multiple ligands can be specified.
May be xyz file or name of AARON built-in.

=item B<-w [directory]>, B<--write [directory]>

Save files instead of printing to STDOUT. Defaults to current directory.

=item B<-h>, B<--help>

Print this help message and exit

=back

=cut

