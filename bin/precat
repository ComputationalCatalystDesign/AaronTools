#!/usr/bin/perl -w

use strict;
use lib $ENV{'QCHASM'};

use Getopt::Long;
use Pod::Usage;
use AaronTools::Geometry;

unshift @INC, ("$ENV{'QCHASM'}/AaronTools/bin");
require _utils;

sub main {
    my $file = shift;
    my %opt  = @_;

    my $cat = _utils::get_cat($file);
    return 1 unless $cat;

    if ( $opt{outfile} eq '-' ) {
        $opt{outfile} = '';
    } else {
        if ( $opt{outfile} eq '' ) {
            $opt{outfile} = $file;
            $opt{outfile} =~ s/\.xyz$/_reordered\.xyz/ unless $opt{force};
        }
        unless ( $opt{force} ) {
            $opt{outfile} = _utils::handle_overwrite( $opt{outfile} );
        }
    }

    $cat->printXYZ( $opt{outfile}, '', 1 );
}

my $helpMsg =
    "Read in a catalysis system, reoder substitutents atoms "
  . "and print into output file. The resulting structure "
  . "is ready for further manipulation, esp. substitute.\n";

my %opt;
$opt{outfile} = '-';
GetOptions( 'help|h'     => \$opt{help},
            'output|o:s' => \$opt{outfile},
            'force|f'    => \$opt{force}, )
  or pod2usage( -exitval => 1,
                -verbose => 1, );

my ($input) = grep { $_ =~ /\.xyz$/ } @ARGV;

pod2usage( -msg     => $helpMsg,
           -exitval => 1,
           -verbose => 1,
) if $opt{help};

$input
  or pod2usage( -msg     => "A input XYZ file must be provided\n",
                -exitval => 1,
                -verbose => 1, );

&main( $input, %opt );

=pod

=head1 SYNOPSIS

$QCHASM/AaronTools/bin/precat [options] input.xyz

=head1 OPTIONS

=over

=item B<-h>, B<--help>

Print help message

=item B<-o [output_file]>, B<--output [output_file]>

Output to file instead of STDOUT. Default file name is infile_reordered.xyz

=item B<-f>, B<--force>

Ignore missing output file and overwrite input infile

=back

=cut

