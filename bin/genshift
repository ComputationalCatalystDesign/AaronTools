#!/usr/bin/env -S perl -w

use strict;
use lib $ENV{'QCHASM'};
use lib $ENV{'PERL_LIB'};

use Getopt::Long;
use Pod::Usage;
use Math::Trig;
use Math::Vector::Real;
use AaronTools::Geometry;

unshift @INC, ("$ENV{'QCHASM'}/AaronTools/bin");
require _utils;

sub main {
    my $file = shift;
    my %opt  = @_;
    my $vector;
    my $nshift;

    my $geom = _utils::get_geom($file);
    return 1 unless $geom;

    if ( @{ $opt{vector} } == 1 ) {
        $vector = $geom->get_point( $opt{vector}->[0] - 1 );
        $vector *= -1;
    } elsif ( @{ $opt{vector} } == 2 ) {
        $vector = $geom->get_point( $opt{vector}->[0] - 1 ) / 2;
        $vector += $geom->get_point( $opt{vector}->[1] - 1 ) / 2;
        $vector *= -1;
    } else {
        $vector = V( @{ $opt{vector} } );
    }

    # shift target atoms if specified, defaults to all atoms
    if ( @{ $opt{targets} } ) {
        $geom->coord_shift( $vector, $opt{targets} );
    } else {
        $geom->coord_shift($vector);
    }

    # Printing
    my $comment = _utils::strip_dir($file);
    if ( @{ $opt{vector} } == 1 ) {
        $comment .= "   Centered atom $opt{vector}->[0]";
    } elsif ( @{ $opt{vector} } == 2 ) {
        $comment .= "   Centered " . join( '-', @{ $opt{vector} } ) . " bond";
    } else {
        $comment .= '   Shifted by (' . join( ',', @{$vector} ) . ')';
    }

    # prints to STDOUT if $outfile == ''
    unless ( $opt{force} ) {
        $opt{output} = _utils::handle_overwrite( $opt{output} );
    }
    _utils::mkdirsfor( $opt{output} ) if $opt{output};
    print("Saving updated geometry to $opt{output}\n") if $opt{output};
    $geom->printXYZ( $opt{output}, $comment, 1 );
}

# read in options
my %opt;
my @vector;
my @targets;
$opt{help}   = '';
$opt{vector} = \@vector;
GetOptions( 'help|h'          => \$opt{help},
            'vector|v=f{1,3}' => \@vector,
            'targets|t:s'     => \$opt{targets},
            'force|f'         => \$opt{force},
            'output|o:s'      => \$opt{output} )
  or pod2usage(
    { -exitval => 1,
      -verbose => 1
    } );
pod2usage(0) if $opt{help};

# requires a shift vector and at least one file
pod2usage(
    { -message => "Please provide a shift vector and at least one file",
      -exitval => 1,
      -verbose => 1
    } ) unless ( @ARGV > 0 and @{ $opt{vector} } );

# targets supplied as 1-indexed, Aaron uses 0-indexing
if ( defined $opt{targets} ) {
    my @targets;
    for my $t ( split /,/, $opt{targets} ) {
        my @trange = split /-/, $t;
        if ( @trange == 2 ) {
            push @targets, ( $trange[0] .. $trange[1] );
        } else {
            push @targets, $trange[0];
        }
    }
    $opt{targets} = \@targets;
}
foreach my $t ( @{ $opt{targets} } ) {
    $t -= 1;
}

&main( $ARGV[0], %opt );

=pod

=head1 SYNOPSIS

genshift [options] -v (x y z | a) file

=head1 OPTIONS

=over

=item B<-v (x y z | a | a1 a2)>, B<--vector (x y z | a | a1 a2)>

Shift the molecule (or target fragment) by the vector (x, y, z),
or center a specified atom (a) or bond (a1 a2) to the origin (1-indexed)

=item B<-t list>, B<--targets list>

List of atom numbers to shift (1-indexed). Defaults to all atoms.

=item B<-o outfile -f>, B<--output outfile --force>

Write updated geometry to outfile,
optionally forcing overwrite if the file already exists.

=item B<-h>, B<--help>

Print this help message and exit

=back

=cut

