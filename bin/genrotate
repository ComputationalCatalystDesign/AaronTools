#!/usr/bin/env perl

use strict;
use lib $ENV{'QCHASM'};
use lib $ENV{'PERL_LIB'};

use Getopt::Long;
use Pod::Usage;
use Data::Dumper;
use Math::Trig;
use Math::Vector::Real;
use AaronTools::Geometry;

unshift @INC, ("$ENV{'QCHASM'}/AaronTools/bin");
require _utils;

sub main {
    my $file = shift;
    my %opt  = @_;
    my $angle;
    my $vector;
    my $shift;

    my $geom = _utils::get_geom($file);
    return 1 unless $geom;

    if ( @{ $opt{vector} } == 2 && $opt{vector}->[1] =~ /^\d+$/ ) {
        $shift = $geom->get_point( $opt{vector}->[0] - 1 );
        $geom->coord_shift( -1 * $shift );
        $vector =
          $geom->get_bond( $opt{vector}->[0] - 1, $opt{vector}->[1] - 1 );
    } elsif ( @{ $opt{vector} } == 2 ) {
        # get substituent
        my ( $end, $targets ) = $geom->get_sub( $opt{vector}->[0] - 1 );
        my $sub = AaronTools::Substituent->new( name => $opt{vector}->[1],
                                                end  => $end );
        $opt{angle}   = $sub->{conformer_angle};
        $opt{nrots}   = $sub->{conformer_num};
        $opt{targets} = $targets;

        # define shift and vector
        $shift = $geom->get_point($end);
        $geom->coord_shift( -1 * $shift );
        $vector = $geom->get_bond( $end, $opt{vector}->[0] - 1 );
    } else {
        $shift  = 0;
        $vector = V( @{ $opt{vector} } );
    }

    # set angle if equally spaced rotations requested
    unless ( $opt{angle} ) {
        $angle = 2 * pi / $opt{nrots};
    }else{
		$angle = $opt{angle};
	}

    # perform requested number of rotations
    my $nrots = 0;
    while ( $nrots < $opt{nrots} ) {
        if ( $opt{vector}->[1] !~ /^\d+$/ ) {
            # if using the -v a_num sub_name form
            # need to save unrotated for times when nconf*angle != 360
            printing( $file, $geom, $vector, $angle, $nrots, $shift, %opt );
        }

        # rotates target atoms if specified, defaults to all atoms
        if ( @{ $opt{targets} } ) {
            $geom->genrotate( $vector, $angle, $opt{targets} );
        } else {
            $geom->genrotate( $vector, $angle );
        }

        # increase rotation count before printing for angle calculation
        $nrots += 1;

        printing( $file, $geom, $vector, $angle, $nrots, $shift, %opt );
    }
    return 0;
}

sub printing {
    my $file   = shift;
    my $geom   = shift;
    my $vector = shift;
    my $angle  = shift;
    my $nrots  = shift;
    my $shift  = shift;
    my %opt    = @_;

    # $outfile will be empty string if write to file not requested
    my $axis = join( '_', @{ $opt{vector} } );
    my $outfile;
    if ( $opt{radians} ) {
        $outfile = _utils::get_outfile(
            $file, $opt{write},
            [ 'genrotate', $axis, $angle * $nrots ] );
    }else{
		$outfile = _utils::get_outfile(
			$file, $opt{write},
			[ 'genrotate', $axis, rad2deg( $angle * $nrots ) ] );

	}

    # set comment line to something useful
    my $comment;
    if ($outfile) {
        _utils::mkdirsfor($outfile);
        print("Saving to $outfile\n") if $outfile;
        $comment = _utils::strip_dir($outfile);
    } else {
        $comment = _utils::strip_dir($file);
    }
    if ( $opt{radians} ) {
        $comment .=
          "  Rotated " . $angle * $nrots / pi . "*pi along " . join ",",
          @$vector;
    } else {
        $comment .=
          "  Rotated " . rad2deg( $angle * $nrots ) . " along " . join ",",
          @$vector;
    }

    # printXYZ('') prints to STDOUT
    $geom->coord_shift($shift) if $shift;
    $geom->printXYZ( $outfile, $comment, 1 );
    print("\n") unless $outfile;
    $geom->coord_shift( -1 * $shift ) if $shift;
}

# read in options
my %opt;
my @vector;
my @targets;
$opt{vector} = \@vector;
$opt{nrots}  = 1;
$opt{write}  = '-';        # '-' indicates no write, '' indicates write to cwd
GetOptions( 'help|h'          => \$opt{help},
            'vector|v=f{2,3}' => \@vector,
            'angle|a:f'       => \$opt{angle},
            'nrots|n:i'       => \$opt{nrots},
            'targets|t:s'     => \$opt{targets},
            'radians|r'       => \$opt{radians},
            'write|w:s'       => \$opt{write} )
  or pod2usage(
    { -exitval => 1,
      -verbose => 1
    } );
pod2usage(0) if $opt{help};

# requires axis vector, angle or number of rotations, and at least one file
pod2usage(
    {  -message =>
         "Please provide an axis vector, an angle and/or a number of rotations (unless substituent rotation requested), and at least one file\n",
       -exitval => 1,
       -verbose => 1
    } )
  unless (     @ARGV > 0
           and @{ $opt{vector} }
           and ( ( defined $opt{angle} or $opt{nrots} > 1 )
                 or $opt{vector}->[1] !~ /^\d+$/ ) );

pod2usage(
    { -message => "Number of rotations must be a positive integer.\n",
      -exitval => 1,
      -verbose => 1
    } ) if ( $opt{nrots} < 0 );

# targets supplied as 1-indexed, Aaron uses 0-indexing
if ( defined $opt{targets} ) {
    my @targets;
    for my $t ( split /,/, $opt{targets} ) {
        my @trange = split /-/, $t;
        if ( @trange == 2 ) {
            push @targets, ( $trange[0] .. $trange[1] );
        } else {
            push @targets, $trange[0];
        }
    }
    $opt{targets} = \@targets;
}
foreach my $t ( @{ $opt{targets} } ) {
    $t -= 1;
}

# angle should be in radians
if ( defined $opt{angle} ) {
    $opt{angle} = deg2rad( $opt{angle} ) unless ( $opt{radians} );
}

&main( $ARGV[0], %opt );

=pod

=head1 SYNOPSIS

genrotate [options] -v (x y z | a1 a2 | a sub_name) -a angle [-n repeat] file

genrotate [options] -v (x y z | a1 a2 | a sub_name) -n rotations file

=head1 OPTIONS

=over

=item B<-v (x y z | a1 a2 | a1 sub_name)>, B<--vector (x y z | a1 a2 | a1 sub_name)>

The rotation vector defined by the points (0, 0, 0), (x, y, z),
defined by the vector from a1 to a2 (1-indexed atoms),
or defined by the connection from the substituent at atom a1 to the rest of the molecule.
Should be space separated.

=item B<-a angle>, B<--angle angle>

Rotate by ANGLE degrees.
If using the {-v a1 sub_name} form, the angle from the substituent's conformer definition is used instead.

=item B<-n num>, B<--nrot num>

If used with --angle specified, repeats the rotation NUM times.
Otherwise, performs NUM equally spaced rotations (implies ANGLE=360/NUM).
If using the {-v a1 sub_name} form, the number of rotations from the substituent's conformer definition is used instead.

=item B<-t list>, B<--targets list>

List of atom numbers to rotate (1-indexed). Defaults to all atoms.

=item B<-r>, B<--radians>

Angle specified in radians (default is degrees).

=item B<-w [directory]>, B<--write [directory]>

Write new geometry output to INFILE_genrotate_AXIS_ANGLE.xyz instead of STDOUT.
Directory defaults to current working directory.

=item B<-h>, B<--help>

Print this help message and exit.

=back

=cut

