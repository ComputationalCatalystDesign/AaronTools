#!/usr/bin/perl -w

use strict;
use lib $ENV{'QCHASM'};

use Getopt::Long;
use Pod::Usage;
use Data::Dumper;
use AaronTools::Geometry;
use AaronTools::Atoms qw(:BASIC);

our $CONNECTIVITY = CONNECTIVITY;

unshift @INC, ("$ENV{'QCHASM'}/AaronTools/bin");
require _utils;

sub main {
    my $reffile    = shift;
    my $targetfile = shift;
    my %opt        = @_;

    # read in reference and target geometry
    my $refgeom    = _utils::get_geom($reffile);
    my $targetgeom = _utils::get_geom($targetfile);
    unless ( $refgeom and $targetgeom ) {
        print( STDERR "Issue reading $reffile\n" )    unless ($refgeom);
        print( STDERR "Issue reading $targetfile\n" ) unless ($targetgeom);
        print( STDERR "... exiting\n" );
        return 1;
    }

    # perform rmsd align
    my $rmsd = $targetgeom->RMSD( 'ref_geo'     => $refgeom,
                                  'ref_atoms1'  => $opt{targetatoms},
                                  'ref_atoms2'  => $opt{refatoms},
                                  'heavy_atoms' => $opt{heavyatoms},
                                  'reorder'     => $opt{reorder} );

    # Printing
    # prints to STDOUT if $outfile == ''
    print(   STDERR _utils::strip_dir($targetfile)
           . " -> aligned to "
           . _utils::strip_dir($reffile)
           . "\n" );
    unless ( $opt{force} ) {
        $opt{output} = _utils::handle_overwrite( $opt{output} );
    }
    _utils::mkdirsfor( $opt{output} ) if $opt{output};
    print("Saving substituted coords to $opt{output}\n") if $opt{output};
    $targetgeom->printXYZ( $opt{output}, "RMSD: $rmsd", 1 );

    return 0;
}

# read in options
my %opt;
my $refatoms;
my $targetatoms;
$opt{refatoms}    = undef;
$opt{targetatoms} = undef;
GetOptions( 'help|h'          => \$opt{help},
            'heavyatoms|ha'   => \$opt{heavyatoms},
            'refatoms|r=s'    => \$refatoms,
            'targetatoms|t=s' => \$targetatoms,
			'change-order|c'  => \$opt{reorder},
            'force|f'         => \$opt{force},
            'output|o=s'      => \$opt{output} )
  or pod2usage(
    { -exitval => 1,
      -verbose => 1
    } );
pod2usage(0) if $opt{help};

pod2usage(
    { -message => "Please provide a reference and target geometry",
      -exitval => 1,
      -verbose => 1
    } ) unless ( @ARGV == 2 );

# AaronTools uses 0-indexing
sub split_atom_string {
    my $atomstring = shift;
    my @res;
    for my $as ( split /,/, $atomstring ) {
        if ( $as =~ /-/ ) {
            my @tmp = split /-/, $as;
            push @res, ( $tmp[0] .. $tmp[1] );
        } else {
            push @res, $as;
        }
    }
    return @res;
}
if ($refatoms) {
    my @res = split_atom_string($refatoms);
    foreach my $r (@res) {
        $r -= 1;
    }
    $opt{refatoms} = \@res;
}
if ($targetatoms) {
    my @res = split_atom_string($targetatoms);
    foreach my $r (@res) {
        $r -= 1;
    }
    $opt{targetatoms} = \@res;
}

&main( @ARGV, %opt );

=pod

=head1 SYNOPSIS

rmsd_align [options] [-r reference_atomlist] reference_geom [-t target_atomlist] target_geom

Aligns [specified atoms in] target_geom to [specified atoms in] reference_geom.

=head1 OPTIONS

=over

=item B<-ha>, B<--heavyatoms>

Only align heavy atoms.

=item B<-r atomlist>, B<--refatoms atomlist>

List of atoms in reference geometry to align to (1-indexed).

=item B<-t atomlist>, B<--targetatoms atomlist>

List of atoms in target geometry to align (1-indexed).

=item B<-c>, B<--change-order>

Tries reordering atoms to find best RMSD alignment.
Use only for small systems, large systems should use the atom list method, above.

=item B<-o FILENAME [-f]>, B<--output FILENAME [--force]>

Write aligned geometry to file instead of printing to STDOUT.
Optionally, force overwrite if file already exists.

=item B<-h>, B<--help>

Print this help message and exit

=back

=cut

