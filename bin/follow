#!/usr/bin/perl -w

use strict;
use lib $ENV{'QCHASM'};
use lib $ENV{'PERL_LIB'};

use Getopt::Long;
use Pod::Usage;
use Math::Vector::Real;
use AaronTools::G09Out;
use Data::Dumper;

unshift @INC, ("$ENV{'QCHASM'}/AaronTools/bin");
require _utils;

sub main {
    my $file = shift;
    my %opt  = @_;

    unless ( $opt{force} ) {
        $opt{output} = _utils::handle_overwrite( $opt{output} );
    }
    _utils::mkdirsfor( $opt{output} ) if $opt{output};

    # grab coords
    my $geom = _utils::get_geom($file);
    return 1 unless $geom;

    # grab frequencies
    open( LOGFILE, '<', $file )
      or die "Cannot open $file for reading: $!";
    my $freq = new AaronTools::Frequency( string    => join( '', <LOGFILE> ),
                                          num_atoms => $#{ $geom->{coords} } + 1
    );

    my @freqs   = @{ $freq->{frequencies} };
    my @vectors = @{ $freq->{vectors} };

	unless ( @freqs && @vectors ){
		print {*STDERR} "Improper file format\n";
		return 1;
	}

	if ( $opt{list} ){
		my $s = '';
		for ( my $i = 0; $i < @freqs; $i++ ){
			$s .= sprintf("%4d: %12f", $i+1, $freqs[$i]);
			$s .= "\n";
		}
		system 'echo "'.$s.'" | less --prompt="page %db (q to quit, h for help)"';
		return 0;
	}

    if ( !defined $opt{mode} && $freqs[0] > 0 ) {
        print {*STDERR} "No imaginary frequencies to follow...\n";
        return 1;
    }

	if (defined $opt{mode}){
		$opt{mode}--;
	}else{
		$opt{mode} = 0;
	}
	if ( $opt{mode} < 0 || $opt{mode} > @freqs ){
		print {*STDERR} "Mode request out of range. Use --list option to see acceptable selection choices\n";
		return 1;
	}

    if ( $opt{animate} ) {
        # if animate, 10 steps each in + and - direction
        for my $step ( -10 .. 10 ) {
            $step *= 0.1;

            # coord_shift for each step
            my $geom_step = $geom->copy();
            for my $atom ( 0 .. $#{ $geom->{coords} } ) {
                my $v = $step * V( @{ $vectors[$opt{mode}][$atom] } );
                $geom_step->coord_shift( $v, [$atom] );
            }

            # printXYZ, overwrite on first step, append after that
            print("Saving step $step to $opt{output}\n") if $opt{output};
            $geom_step->printXYZ(
                               $opt{output},
                               "Following frequency $freqs[$opt{mode}]: scaled by $step",
                               $step == -1 );
        }
    } else {
        # else, one step in specified direction
        my $step = 0.1;
        if ( $opt{reverse} ) {
            $step *= -1;
        }

        # coord_shift
        for my $atom ( 0 .. $#{ $geom->{coords} } ) {
            my $v = $step * V( @{ $vectors[$opt{mode}][$atom] } );
            $geom->coord_shift( $v, [$atom] );
        }
        # printXYZ
        print("Saving updated geometry to $opt{output}\n") if $opt{output};
        $geom->printXYZ(
            $opt{output},
            "Following imaginary frequency: scaled by $step", 1 );
    }
}

# read in options
my %opt;
$opt{output} = '';
GetOptions( 'help|h'     => \$opt{help},
            'animate|a'  => \$opt{animate},
            'mode|m=i'   => \$opt{mode},
			'list|l'   => \$opt{list},
            'reverse|r'  => \$opt{reverse},
            'output|o=s' => \$opt{output},
            'force|f'    => \$opt{force} )
  or pod2usage(
    { -exitval => 1,
      -verbose => 1
    } );
pod2usage(0) if $opt{help};

pod2usage(
    { -message => "Please provide a reference geometry",
      -exitval => 1,
      -verbose => 1
    } ) unless ( $ARGV[0] );

&main( $ARGV[0], %opt );

=pod

=head1 SYNOPSIS

follow [options] filename

=head1 OPTIONS

=over

=item B<-h>, B<--help>

Print this help message and exit

=item B<-a>, B<--animate>

Follow 10 steps each in (+) and (-) direction

=item B<-r>, B<--reverse>

Follow in the (-) direction

=item B<-m>, B<--mode>

Choose a mode to follow, 1-indexed. Defaults to (1st) imaginary mode.

=item B<-l>, B<--list>

List available modes

=item B<-o outfile.xyz [-f]>, B<--output outfile.xyz [--force]>

Write new geometry output to xyz-file instead of STDOUT.
Optionally, force overwrite if file exists.

=back

=cut

