#!/usr/bin/perl -w

use strict;
use lib $ENV{'QCHASM'};

use Getopt::Long;
use Pod::Usage;
use Data::Dumper;
use AaronTools::Geometry;

unshift @INC, ("$ENV{'QCHASM'}/AaronTools/bin");
require _utils;

sub main {
    my $file = shift;
    my %opt  = @_;
    my %subs;

    my $geom = _utils::get_geom($file);
    return 1 unless $geom;

    foreach my $target ( keys %{ $opt{subs} } ) {
        foreach my $k ( split /,/, $target ) {
            $subs{$k} = $opt{subs}{$target};
        }
    }

    # perform substitute for each substituent
    foreach my $target ( keys %subs ) {
        # target supplied as 1-indexed, Aaron uses 0-indexing
        $geom->substitute( 'target'           => $target - 1,
                           'sub'              => $subs{$target},
                           'minimize_torsion' => $opt{minimize_torsion} );

    }

    # Printing
    # make comment something useful
    my $comment = _utils::strip_dir($file);
    my $tmp     = [];
    foreach my $key ( keys %{ $opt{subs} } ) {
        push @{$tmp}, $key;
        push @{$tmp}, $opt{subs}{$key};
        $comment .= " " . $key . "=>" . $opt{subs}{$key};
    }

    # $outfile will be empty string if write to file not requested
    my $outfile;
    unless ( $opt{force} ) {
        $outfile = _utils::handle_overwrite( $opt{output} );
    } else {
        $outfile = $opt{output};
    }

    # prints to STDOUT if $outfile == ''
    _utils::mkdirsfor($outfile) if $outfile;
    print("Saving substituted coords to $outfile\n") if $outfile;
    $geom->printXYZ( $outfile, $comment, 1 );

	return 0;
}

# read in options
my %opt;
my %sublist;
$opt{help}   = '';
$opt{subs}   = \%sublist;
$opt{output} = '';
GetOptions( 'help|h'       => \$opt{help},
            'available|a'  => \$opt{available},
            'sub|s=s%{1,}' => \%sublist,
            'minimize|m'   => \$opt{minimize_torsion},
            'output|o=s'   => \$opt{output},
            'force|f'    => \$opt{force} )
  or pod2usage(
    { -exitval => 1,
      -verbose => 1
    } );

pod2usage(0) if $opt{help};
if ( $opt{available} ) {
    _utils::get_available_subs();
    exit;
}

pod2usage(
    {  -message =>
         "Please provide at least one target atom and substituent pair",
       -exitval => 1,
       -verbose => 1
    } ) if ( keys(%sublist) < 1 );
pod2usage(
    { -message => "Please provide a geometry file",
      -exitval => 1,
      -verbose => 1
    } ) if ( @ARGV < 1 );

&main( $ARGV[0], %opt );

=pod

=head1 SYNOPSIS

substitute [options] -s atom1=sub1 [atom2=sub2 ...] file [file2 ...]

=head1 OPTIONS

=over

=item B<-a>, B<--available>

List available substituent names and exit

=item B<-s atom=sub>, B<--sub atom=sub>

Location of substituent (1-indexed) and requested substituent using key=value notation.

=item B<-m>, B<--minimize>

Rotate new substituent to minimize LJ potential

=item B<-o[f] outfile>, B<--output[-force] outfile>

Only available if one geometry file is provided, otherwise use the B<--write> flag. Save the new geometry to <outfile>. Optionally, force overwrite if <outfile> already exists.

=item B<-h>, B<--help>

Print this help message and exit

=back

=cut

