#!/usr/bin/perl -w

use strict;
use lib $ENV{'QCHASM'};
use lib $ENV{'PERL_LIB'};

use Getopt::Long;
use Pod::Usage;
use Data::Dumper;
use Math::Vector::Real;
use Math::Trig;

use AaronTools::Geometry;
unshift @INC, ("$ENV{'QCHASM'}/AaronTools/bin");
require _utils;

my $debug;

sub main {
    my $file = shift;
    my %opt  = @_;

    if ( $opt{name} ) {
        if ( $opt{name} =~ /\/?(.*\/)+.*/ ) {
            $opt{name} = _utils::strip_dir( $opt{name} );
        }
        if ( $opt{name} =~ /.*\.xyz/ ) {
            $opt{name} =~ s/(.*)\.xyz/$1/;
        }
        $opt{name} =
          $ENV{'HOME'} . "/Aaron_libs/Subs/" . $opt{name} . ".xyz";
        if ( -e $opt{name} ) {
            die
              "Substituent of the same name already in your AaronTools library. Please choose a different name or delete it.\nFile already exists at: $opt{name}\n";
        }
    }

    # read in geometry from file
    my $geom = _utils::get_geom($file) if -e $file;
    return 1 unless $geom;

    # target supplied as 1-indexed, Aaron uses 0-indexing
    $opt{target} -= 1;
    $opt{avoid}  -= 1;

    # get new geometry from requested fragment
    my $fragment = $geom->get_all_connected( $opt{target}, $opt{avoid} );
    # still need avoid atom for bond positioning later
    # Now, avoid = 0 and start = 1
    unshift @{$fragment}, $opt{avoid};
    if ($debug) { print "Fragment:\n", Dumper($fragment); }

    my $new_geom = $geom->subgeo($fragment);
    if ($debug) { print "Subgeo:\n", Dumper($new_geom); }

    # shift avoid atom to (0,0,0)
    $new_geom->coord_shift( -1 * $new_geom->get_point(0) );
    if ($debug) { print "Coord shift:\n", Dumper($new_geom); }

    # rotate to align avoid-start bond to x-axis
    my $bond = $new_geom->get_bond( 0, 1 );
    my $x        = V( 1, 0, 0 );
    my $rotvec   = $bond x $x;
    my $rotangle = atan2( $x, $bond ) + pi;
    # $rotangle = rad2deg($rotangle);
    $new_geom->genrotate( $rotvec, $rotangle );
    if ($debug) { print "Rotate:\n", Dumper($new_geom); }

    # delete avoid atom
    $new_geom->delete_atom( [0] );

    # adjust (0,0,0)-start bond length

    # generate comment line with conformer info
    # TODO: Determine number of conformers and rotation angle based on symmetry
    my $comment = "CF:@{$opt{confs}}[0],@{$opt{confs}}[1]";
    $new_geom->printXYZ( $opt{name}, $comment, 1 );
}

# read in options
my %opt;
my @confs;
$opt{confs} = \@confs;
$opt{name}  = '';
GetOptions(
    'help|h'      => \$opt{help},
    'debug|d'     => \$debug,
    'target|t=i'  => \$opt{target},
    'avoid|a=i'   => \$opt{avoid},
    'conf|c=f{2}' => $opt{confs},
    'name|n:s'    => \$opt{name} )
  or pod2usage( {
      -exitval => 1,
      -verbose => 1
  } );
pod2usage(0) if $opt{help};

# need to supply a geometry file
pod2usage( {
        -message => "Please provide one geometry file to substitute",
        -exitval => 1,
        -verbose => 1
    } ) unless ( $#ARGV == 0 );

&main( $ARGV[0], %opt );

=pod

=head1 SYNOPSIS

libadd_substituent [-n name] -t target -a avoid -c nconf rotangle filename

=head1 OPTIONS

=over

=item B<-t atom>, B<--target atom>

The index of the substituent atom connected to the rest of the geometry

=item B<-a atom> B<--avoid atom>

The index of the atom that the substituent connects to

=item B<-c nconfs rotangle>, B<-conf nconfs rotangle>

The number of conformers and the rotation angle (in degrees) used to generate each

=item B<-n name>, B<--name name>

The name the substituent should be saved under (without the path or file extention). If unsupplied, will simply print to STDOUT

=item B<-h>, B<--help>

Print this help message and exit

=back

=cut

