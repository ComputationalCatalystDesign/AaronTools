#!/usr/bin/env perl

use strict;
use lib $ENV{'QCHASM'};

use Getopt::Long;
use Pod::Usage;
use AaronTools::Catalysis;
use Data::Dumper;

unshift @INC, ("$ENV{'QCHASM'}/AaronTools/bin");
require _utils;

sub main {
    my $file = shift;
    my %opt  = @_;

    # if substituent is named, just go ahead and pass that to substitute()
    # otherwise, we should pass substituent numbering to Catalysis class
    # to preserve indexing when interacting with object on our side
    my %numbered;
    $numbered{ligand}    = {};
    $numbered{substrate} = {};
    my %named;
    $named{ligand}    = {};
    $named{substrate} = {};

    # store command line options in the appropriate hash
    ( $numbered{ligand}, $named{ligand} ) = store_requested( \%opt, 'ligand' );
    ( $numbered{substrate}, $named{substrate} ) =
      store_requested( \%opt, 'substrate' );

    # create catalysis object with requested substituent indexing
    my $geom = _utils::get_cat( $file, \%numbered, $opt{relnum} );
    return 1 unless $geom;

    $geom->substitute();

    foreach my $component ( keys %named ) {
        $geom->substitute( $component, %{ $named{$component} } );
    }

    if ( $opt{minimize} ) {
        $geom->minimize_sub_torsions( object => $geom->{ligand} );
        $geom->minimize_sub_torsions( object => $geom->{substrate} );
    }

    # Printing
    # prints to STDOUT if $outfile == ''
    $opt{output} = _utils::handle_overwrite( $opt{output} ) unless $opt{force};
    _utils::mkdirsfor( $opt{output} ) if $opt{output};
    print("Saving substituted coords to $opt{output}\n") if $opt{output};
    unless( $opt{conflist} ) { $opt{conflist} = 1 };
    $geom->printXYZ( $opt{output}, '', 1 );

    return 0;
}

# store atoms requested for substitution in the appropriate hash
# this allows us to label atoms that may be moved around during the process
sub store_requested {
    my %opt       = %{ shift @_ };
    my $component = shift;
    my %numbered;
    my %named;

    foreach my $sub ( keys %{ $opt{$component} } ) {
        if ( $sub =~ /^\d+,/ ) {
            map { $numbered{ $_ - 1 } = $opt{$component}{$sub} }
              split( /,/, $sub );
        } elsif ( $sub =~ /^\d+/ ) {
            $numbered{ $sub - 1 } = $opt{$component}{$sub};
        } else {
            $named{$sub} = $opt{$component}{$sub};
        }
    }

    return \%numbered, \%named;
}

# read in options
my %opt;
my %sublist;
my %liglist;
$opt{substrate} = \%sublist;
$opt{ligand}    = \%liglist;
GetOptions( 'help|h'            => \$opt{help},
            'available|a'       => \$opt{available},
            'relnum|r'          => \$opt{relnum},
            'substrate|s=s%{,}' => \%sublist,
            'ligand|l=s%{,}'    => \%liglist,
            'minimize|m'        => \$opt{minimize},
            'force|f'           => \$opt{force},
            'output|o=s'        => \$opt{output} )  
  or pod2usage(
    { -exitval => 1,
      -verbose => 1
    } );
pod2usage(0) if $opt{help};

if ( $opt{available} ) {
    _utils::get_available_subs();
    exit;
}

# need to supply a geometry file
pod2usage(
    { -message => "Please provide one geometry file to substitute",
      -exitval => 1,
      -verbose => 1
    } ) unless ( $#ARGV == 0 );

&main( $ARGV[0], %opt );

=pod

=head1 SYNOPSIS

cat_substitute [options] [-l|s target=sub ...] file

=head1 OPTIONS

=over

=item B<-a>, B<--available>

List available substituents and exit

=item B<-l target=sub>, B<--ligand target=sub>

Replace target (atom or substituent) on ligand with specified substituent

=item B<-s target=sub>, B<--substrate target=sub>

Replace target (atom or substituent) on substrate with specified substituent

=item B<-m>, B<--minimize>

Rotate new substitutions to minimize LJ-potential

=item B<-r>, B<--relnum>

Use relative ligand/substrate numbering

=item B<-o outfile [-f]>, B<--output outfile [--force]>

Output to file instead of STDOUT. Optionally, force overwrite if file exists

=item B<-h>, B<--help>

Print this help message and exit

=back

=cut

